import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Separator } from "@/components/ui/separator";
import { X, Plus } from 'lucide-react';

const PractitionerForm = () => {
  // State declarations
  const [error, setError] = useState('');
  const [formData, setFormData] = useState({
    name: {
      given: '',
      family: '',
      prefix: '',
    },
    telecom: {
      phone: '',
      email: '',
    },
    selectedLocations: [],
    locations: [],
    communication: ['en'],
    role: '',
    identifier: '',
    specialties: [],
    qualifications: [{ code: '', issuer: '', period: { start: '', end: '' } }],
    gender: '',
  });

  // Options arrays
  const existingLocations = [
    { id: '1', name: 'Downtown Dental', address: '123 Main St, Downtown' },
    { id: '2', name: 'Westside Smile', address: '456 West Ave, Westside' },
    { id: '3', name: 'North Dental Care', address: '789 North Blvd, Northside' },
  ];

  const specialtyOptions = [
    { code: 'endodontist', display: 'Endodontist (Endodontics)' },
    { code: 'orthodontist', display: 'Orthodontist (Orthodontics)' },
    { code: 'periodontist', display: 'Periodontist (Periodontics)' },
    { code: 'prosthodontist', display: 'Prosthodontist (Prosthodontics)' },
    { code: 'oral-surgeon', display: 'Oral & Maxillofacial Surgeon' },
    { code: 'oral-radiologist', display: 'Oral & Maxillofacial Radiologist' },
    { code: 'anesthesiologist', display: 'Dentist Anesthesiologists' },
    { code: 'pathologist', display: 'Oral & Maxillofacial Pathologist' },
    { code: 'pediatric', display: 'Pediatric Dentist (Pedodontist)' },
    { code: 'orofacial-pain', display: 'Orofacial Pain (OFP)' },
    { code: 'oral-medicine', display: 'Oral Medicine' },
    { code: 'public-health', display: 'Dental Public Health (DPH)' },
  ];

  const roleOptions = [
    { code: 'dentist', display: 'Dentist' },
    { code: 'hygienist', display: 'Dental Hygienist' },
    { code: 'assistant', display: 'Dental Assistant' },
    { code: 'technician', display: 'Dental Technician (Lab Tech)' },
    { code: 'therapist', display: 'Dental Therapist' },
    { code: 'denturist', display: 'Denturist' },
    { code: 'practice-manager', display: 'Practice Manager' },
    { code: 'office-manager', display: 'Office Manager' },
    { code: 'receptionist', display: 'Receptionist' },
    { code: 'billing', display: 'Billing Specialist / Insurance Coordinator' },
    { code: 'it-admin', display: 'IT Administrator / IT Support' },
  ];

  const languageOptions = [
    { code: 'en', display: 'English' },
    { code: 'es', display: 'Spanish' },
    { code: 'zh', display: 'Chinese' },
  ];

  const qualificationOptions = [
    { code: 'DDS', display: 'Doctor of Dental Surgery' },
    { code: 'DMD', display: 'Doctor of Medicine in Dentistry' },
    { code: 'RDH', display: 'Registered Dental Hygienist' },
    { code: 'RDA', display: 'Registered Dental Assistant' },
    { code: 'CDA', display: 'Certified Dental Assistant' },
    { code: 'EFDA', display: 'Expanded Function Dental Assistant' },
    { code: 'CDT', display: 'Certified Dental Technician' },
    { code: 'FAGD', display: 'Fellow of the Academy of General Dentistry' },
    { code: 'ADHP', display: 'Advanced Dental Hygiene Practitioner' },
    { code: 'Denturist', display: 'Denturist License' },
    { code: 'Diplomate ABO', display: 'Diplomate of the American Board of Orthodontics' },
    { code: 'Diplomate ABE', display: 'Diplomate of the American Board of Endodontics' },
    { code: 'Diplomate ABP', display: 'Diplomate of the American Board of Periodontology' },
    { code: 'Diplomate ABPros', display: 'Diplomate of the American Board of Prosthodontics' },
    { code: 'Diplomate ABOMS', display: 'Diplomate of the American Board of Oral & Maxillofacial Surgery' },
    { code: 'Diplomate ABPD', display: 'Diplomate of the American Board of Pediatric Dentistry' },
    { code: 'Diplomate ABDPH', display: 'Diplomate of the American Board of Dental Public Health' },
  ];

  // Handler functions
  const handleInputChange = (path, value) => {
    setFormData(prev => {
      const newData = { ...prev };
      const pathArray = path.split('.');
      let current = newData;
      
      for (let i = 0; i < pathArray.length - 1; i++) {
        current = current[pathArray[i]];
      }
      current[pathArray[pathArray.length - 1]] = value;
      
      return newData;
    });
  };

  const addLocation = () => {
    setFormData(prev => ({
      ...prev,
      locations: [...prev.locations, { name: '', address: '' }]
    }));
  };

  const removeLocation = (index) => {
    setFormData(prev => ({
      ...prev,
      locations: prev.locations.filter((_, i) => i !== index)
    }));
  };

  const updateLocation = (index, field, value) => {
    setFormData(prev => {
      const newLocations = [...prev.locations];
      newLocations[index][field] = value;
      return { ...prev, locations: newLocations };
    });
  };

  const addQualification = () => {
    setFormData(prev => ({
      ...prev,
      qualifications: [
        ...prev.qualifications,
        { code: '', issuer: '', period: { start: '', end: '' } }
      ]
    }));
  };

  const removeQualification = (index) => {
    if (formData.qualifications.length > 1) {
      setFormData(prev => ({
        ...prev,
        qualifications: prev.qualifications.filter((_, i) => i !== index)
      }));
    }
  };

  const updateQualification = (index, field, value) => {
    setFormData(prev => {
      const newQualifications = [...prev.qualifications];
      if (field.includes('.')) {
        const [parent, child] = field.split('.');
        newQualifications[index][parent][child] = value;
      } else {
        newQualifications[index][field] = value;
      }
      return { ...prev, qualifications: newQualifications };
    });
  };

  const toggleLanguage = (languageCode) => {
    setFormData(prev => {
      const newCommunication = prev.communication.includes(languageCode)
        ? prev.communication.filter(code => code !== languageCode)
        : [...prev.communication, languageCode];
      return { ...prev, communication: newCommunication };
    });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // Add your form submission logic here
  };

  return (
    <div className="w-full max-w-3xl mx-auto space-y-8">
      <Card>
        <CardHeader>
          <CardTitle>New Practitioner Registration</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-8">
            {error && (
              <Alert variant="destructive">
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            {/* Account Details Section */}
            <div className="space-y-6">
              <div className="space-y-2">
                <h2 className="text-2xl font-bold">Account Details</h2>
                <p className="text-muted-foreground">Basic information for all users</p>
              </div>
              <Separator />

              {/* Name */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Name</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <Input
                    required
                    placeholder="First Name"
                    value={formData.name.given}
                    onChange={(e) => handleInputChange('name.given', e.target.value)}
                  />
                  <Input
                    required
                    placeholder="Last Name"
                    value={formData.name.family}
                    onChange={(e) => handleInputChange('name.family', e.target.value)}
                  />
                  <Input
                    placeholder="Prefix (Dr., Prof.)"
                    value={formData.name.prefix}
                    onChange={(e) => handleInputChange('name.prefix', e.target.value)}
                  />
                </div>
              </div>

              {/* Contact */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Contact</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Input
                    type="tel"
                    placeholder="Phone"
                    value={formData.telecom.phone}
                    onChange={(e) => handleInputChange('telecom.phone', e.target.value)}
                  />
                  <Input
                    type="email"
                    placeholder="Email"
                    value={formData.telecom.email}
                    onChange={(e) => handleInputChange('telecom.email', e.target.value)}
                  />
                </div>
              </div>

              {/* Locations */}
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <h3 className="text-lg font-semibold">Location(s)</h3>
                  <Button type="button" variant="outline" onClick={addLocation}>
                    <Plus className="w-4 h-4 mr-2" />
                    Add New Location
                  </Button>
                </div>
                
                {/* Existing Locations */}
                <div className="grid grid-cols-1 gap-4 mb-4">
                  {existingLocations.map(location => (
                    <div
                      key={location.id}
                      className={`p-4 border rounded-lg cursor-pointer ${
                        formData.selectedLocations.includes(location.id)
                          ? 'border-primary bg-primary/10'
                          : 'hover:border-primary/50'
                      }`}
                      onClick={() => {
                        setFormData(prev => ({
                          ...prev,
                          selectedLocations: prev.selectedLocations.includes(location.id)
                            ? prev.selectedLocations.filter(id => id !== location.id)
                            : [...prev.selectedLocations, location.id]
                        }));
                      }}
                    >
                      <div className="font-medium">{location.name}</div>
                      <div className="text-sm text-gray-600">{location.address}</div>
                    </div>
                  ))}
                </div>

                {/* Custom Locations */}
                {formData.locations.map((location, index) => (
                  <div key={index} className="p-4 border rounded-lg relative">
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      className="absolute right-2 top-2"
                      onClick={() => removeLocation(index)}
                    >
                      <X className="w-4 h-4" />
                    </Button>
                    <div className="grid grid-cols-1 gap-4">
                      <Input
                        placeholder="Office/Practice Name"
                        value={location.name}
                        onChange={(e) => updateLocation(index, 'name', e.target.value)}
                      />
                      <Input
                        placeholder="Street Address"
                        value={location.address}
                        onChange={(e) => updateLocation(index, 'address', e.target.value)}
                      />
                    </div>
                  </div>
                ))}
              </div>

              {/* Languages */}
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <h3 className="text-lg font-semibold">Languages</h3>
                  <Button 
                    type="button" 
                    variant="outline" 
                    onClick={() => {
                      const availableLanguages = languageOptions
                        .filter(lang => !formData.communication.includes(lang.code));
                      if (availableLanguages.length > 0) {
                        toggleLanguage(availableLanguages[0].code);
                      }
                    }}
                  >
                    <Plus className="w-4 h-4 mr-2" />
                    Add Language
                  </Button>
                </div>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                  {languageOptions.map(language => (
                    <Button
                      key={language.code}
                      type="button"
                      variant={formData.communication.includes(language.code) ? "default" : "outline"}
                      className="justify-start"
                      onClick={() => toggleLanguage(language.code)}
                    >
                      {language.display}
                    </Button>
                  ))}
                </div>
              </div>

              {/* Role */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Role</h3>
                <Select
                  value={formData.role}
                  onValueChange={(value) => handleInputChange('role', value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select Role" />
                  </SelectTrigger>
                  <SelectContent>
                    {roleOptions.map(role => (
                      <SelectItem key={role.code} value={role.code}>
                        {role.display}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Clinical Details Section */}
            <div className="space-y-6">
              <div className="space-y-2">
                <h2 className="text-2xl font-bold">Clinical Details</h2>
                <p className="text-muted-foreground">Additional information for clinical roles</p>
              </div>
              <Separator />

              {/* NPI Number */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">NPI Number</h3>
                <Input
                  required
                  placeholder="Enter NPI Number"
                  value={formData.identifier}
                  onChange={(e) => handleInputChange('identifier', e.target.value)}
                />
              </div>

              {/* Gender */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Gender</h3>
                <Select
                  value={formData.gender}
                  onValueChange={(value) => handleInputChange('gender', value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select Gender" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="male">Male</SelectItem>
                    <SelectItem value="female">Female</SelectItem>
                    <SelectItem value="other">Other</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Specialty */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Specialty</h3>
                <div className="grid grid-cols-2 gap-2">
                  {specialtyOptions.map(specialty => (
                    <Button
                      key={specialty.code}
                      type="button"
                      variant={formData.specialties.includes(specialty.code) ? "default" : "outline"}
                      className="justify-start h-auto py-2 text-left"
                      onClick={() => {
                        setFormData(prev => ({
                          ...prev,
                          specialties: prev.specialties.includes(specialty.code)
                            ? prev.specialties.filter(code => code !== specialty.code)
                            : [...prev.specialties, specialty.code]
                        }));
                      }}
                    >
                      {specialty.display}
                    </Button>
                  ))}
                </div>
              </div>

              {/* Qualifications */}
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <h3 className="text-lg font-semibold">Qualifications</h3>
                  {formData.qualifications.length > 0 && (
                    <Button type="button" variant="outline" onClick={addQualification}>
                      <Plus className="w-4 h-4 mr-2" />
                      Add Qualification
                    </Button>
                  )}
                </div>
                {formData.qualifications.map((qual, index) => (
                  <div key={index} className="p-4 border rounded-lg relative">
                    {index > 0 && (
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        className="absolute right-2 top-2"
                        onClick={() => removeQualification(index)}
                      >
                        <X className="w-4 h-4" />
                      </Button>
                    )}
                    <div className="grid grid-cols-1 gap-4">
                      <Select
                        value={qual.code}
                        onValueChange={(value) => updateQualification(index, 'code', value)}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select Qualification" />
                        </SelectTrigger>
                        <SelectContent>
                          {qualificationOptions.map(option => (
                            <SelectItem key={option.code} value={option.code}>
                              {option.display}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <Input
                        placeholder="Issuing Institution"
                        value={qual.issuer}
                        onChange={(e) => updateQualification(index, 'issuer', e.target.value)}
                      />
                      <div className="grid grid-cols-2 gap-4">
                        <Input
                          type="date"
                          placeholder="Valid From"
                          value={qual.period.start}
                          onChange={(e) => updateQualification(index, 'period.start', e.target.value)}
                        />
                        <Input
                          type="date"
                          placeholder="Valid Until"
                          value={qual.period.end}
                          onChange={(e) => updateQualification(index, 'period.end', e.target.value)}
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <Button type="submit" className="w-full">
              Add Practitioner
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
};

export default PractitionerForm;